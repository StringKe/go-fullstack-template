// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/test_service.proto

package v1connect

import (
	v1 "app/backend/pkg/gen/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TestServiceName is the fully-qualified name of the TestService service.
	TestServiceName = "v1.TestService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TestServiceTest1Procedure is the fully-qualified name of the TestService's Test1 RPC.
	TestServiceTest1Procedure = "/v1.TestService/Test1"
	// TestServiceTest2Procedure is the fully-qualified name of the TestService's Test2 RPC.
	TestServiceTest2Procedure = "/v1.TestService/Test2"
	// TestServiceTest3Procedure is the fully-qualified name of the TestService's Test3 RPC.
	TestServiceTest3Procedure = "/v1.TestService/Test3"
)

// TestServiceClient is a client for the v1.TestService service.
type TestServiceClient interface {
	Test1(context.Context, *connect.Request[v1.Test1Request]) (*connect.Response[v1.Test1Response], error)
	Test2(context.Context, *connect.Request[v1.Test2Request]) (*connect.Response[v1.Test2Response], error)
	// 流式返回
	Test3(context.Context, *connect.Request[v1.Test3Request]) (*connect.ServerStreamForClient[v1.Test3Response], error)
}

// NewTestServiceClient constructs a client for the v1.TestService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTestServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TestServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	testServiceMethods := v1.File_v1_test_service_proto.Services().ByName("TestService").Methods()
	return &testServiceClient{
		test1: connect.NewClient[v1.Test1Request, v1.Test1Response](
			httpClient,
			baseURL+TestServiceTest1Procedure,
			connect.WithSchema(testServiceMethods.ByName("Test1")),
			connect.WithClientOptions(opts...),
		),
		test2: connect.NewClient[v1.Test2Request, v1.Test2Response](
			httpClient,
			baseURL+TestServiceTest2Procedure,
			connect.WithSchema(testServiceMethods.ByName("Test2")),
			connect.WithClientOptions(opts...),
		),
		test3: connect.NewClient[v1.Test3Request, v1.Test3Response](
			httpClient,
			baseURL+TestServiceTest3Procedure,
			connect.WithSchema(testServiceMethods.ByName("Test3")),
			connect.WithClientOptions(opts...),
		),
	}
}

// testServiceClient implements TestServiceClient.
type testServiceClient struct {
	test1 *connect.Client[v1.Test1Request, v1.Test1Response]
	test2 *connect.Client[v1.Test2Request, v1.Test2Response]
	test3 *connect.Client[v1.Test3Request, v1.Test3Response]
}

// Test1 calls v1.TestService.Test1.
func (c *testServiceClient) Test1(ctx context.Context, req *connect.Request[v1.Test1Request]) (*connect.Response[v1.Test1Response], error) {
	return c.test1.CallUnary(ctx, req)
}

// Test2 calls v1.TestService.Test2.
func (c *testServiceClient) Test2(ctx context.Context, req *connect.Request[v1.Test2Request]) (*connect.Response[v1.Test2Response], error) {
	return c.test2.CallUnary(ctx, req)
}

// Test3 calls v1.TestService.Test3.
func (c *testServiceClient) Test3(ctx context.Context, req *connect.Request[v1.Test3Request]) (*connect.ServerStreamForClient[v1.Test3Response], error) {
	return c.test3.CallServerStream(ctx, req)
}

// TestServiceHandler is an implementation of the v1.TestService service.
type TestServiceHandler interface {
	Test1(context.Context, *connect.Request[v1.Test1Request]) (*connect.Response[v1.Test1Response], error)
	Test2(context.Context, *connect.Request[v1.Test2Request]) (*connect.Response[v1.Test2Response], error)
	// 流式返回
	Test3(context.Context, *connect.Request[v1.Test3Request], *connect.ServerStream[v1.Test3Response]) error
}

// NewTestServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTestServiceHandler(svc TestServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	testServiceMethods := v1.File_v1_test_service_proto.Services().ByName("TestService").Methods()
	testServiceTest1Handler := connect.NewUnaryHandler(
		TestServiceTest1Procedure,
		svc.Test1,
		connect.WithSchema(testServiceMethods.ByName("Test1")),
		connect.WithHandlerOptions(opts...),
	)
	testServiceTest2Handler := connect.NewUnaryHandler(
		TestServiceTest2Procedure,
		svc.Test2,
		connect.WithSchema(testServiceMethods.ByName("Test2")),
		connect.WithHandlerOptions(opts...),
	)
	testServiceTest3Handler := connect.NewServerStreamHandler(
		TestServiceTest3Procedure,
		svc.Test3,
		connect.WithSchema(testServiceMethods.ByName("Test3")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1.TestService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TestServiceTest1Procedure:
			testServiceTest1Handler.ServeHTTP(w, r)
		case TestServiceTest2Procedure:
			testServiceTest2Handler.ServeHTTP(w, r)
		case TestServiceTest3Procedure:
			testServiceTest3Handler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTestServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTestServiceHandler struct{}

func (UnimplementedTestServiceHandler) Test1(context.Context, *connect.Request[v1.Test1Request]) (*connect.Response[v1.Test1Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.TestService.Test1 is not implemented"))
}

func (UnimplementedTestServiceHandler) Test2(context.Context, *connect.Request[v1.Test2Request]) (*connect.Response[v1.Test2Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.TestService.Test2 is not implemented"))
}

func (UnimplementedTestServiceHandler) Test3(context.Context, *connect.Request[v1.Test3Request], *connect.ServerStream[v1.Test3Response]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("v1.TestService.Test3 is not implemented"))
}
